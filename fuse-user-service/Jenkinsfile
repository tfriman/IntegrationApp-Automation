pipeline {
    agent {
        node {
            label 'maven'
        }
    }
    parameters{
        string (defaultValue: 'notinuse', name:'OPENSHIFT_HOST', description:'open shift cluster url')
        string (defaultValue: 'notinuse', name:'OPENSHIFT_TOKEN', description:'open shift token')
        string (defaultValue: 'image-registry.openshift-image-registry.svc:5000', name:'IMAGE_REGISTRY', description:'open shift token')
        string (defaultValue: 'rh-dev', name:'IMAGE_NAMESPACE', description:'name space where image deployed')
        string (defaultValue: 'rh-dev', name:'DEV_PROJECT', description:'build or development project')
        string (defaultValue: 'rh-test', name:'TEST_PROJECT', description:'Test project')
        string (defaultValue: 'rh-prod', name:'PROD_PROJECT', description:'Production project')
        string (defaultValue: 'https://github.com/rh-integration/IntegrationApp-Automation.git', name:'GIT_REPO', description:'Git source')
        string (defaultValue: 'master', name:'GIT_BRANCH', description:'Git branch in the source git')
        string (defaultValue: 'dbuser', name:'MYSQL_USER', description:'My Sql user name')
        string (defaultValue: 'password', name:'MYSQL_PWD', description:'My Sql user password')
        booleanParam (defaultValue: false, name:'SELECT_DEPLOY_TO_PROD', description:'Approval to deploy to Production (default: no deployment to production)')
    }
    environment {
        MODULE_NAME = 'fuse-user-service'
    }
    stages {
        stage ('source') {
            steps {
                git url: params.GIT_REPO, branch: params.GIT_BRANCH
            }
        }
        stage('Build Service') {
            when {
              expression {
                  params.SELECT_DEPLOY_TO_PROD == false
              }
            }
            steps {
                echo "Building.. ${MODULE_NAME} "
                build(env.MODULE_NAME)

                echo "Deploying ${MODULE_NAME} to ${DEV_PROJECT}"
                deploy(env.MODULE_NAME, params.DEV_PROJECT, params.OPENSHIFT_HOST, params.OPENSHIFT_TOKEN, params.MYSQL_USER, params.MYSQL_PWD)
            }
        }
      stage('Dev-Env smoke-test') {
            when {
              expression {
                  params.SELECT_DEPLOY_TO_PROD == false
              }
            }
            steps {
                script {

                    echo "Waiting for deployment to complete prior starting smoke testing"
                    sleep 60
                    retry(5) {
                        serviceName = 'fuse-user-service:8080'
                        smokeTestOperation = 'cicd/users/profile/11111'
                        makeGetRequest("http://${serviceName}/${smokeTestOperation}")
                    }
                }
            }
        }
        stage('Pushing to Test') {
            when {
              expression {
                  params.SELECT_DEPLOY_TO_PROD == false
              }
            }
            environment {
                srcTag = 'latest'
                destTag = 'promoteTest'
            }
            steps {
                echo "Deploy ${MODULE_NAME} to ${TEST_PROJECT} "
                promoteServiceSetup(params.OPENSHIFT_HOST, params.OPENSHIFT_TOKEN, env.MODULE_NAME,params.IMAGE_REGISTRY, params.IMAGE_NAMESPACE, env.destTag, params.TEST_PROJECT, params.MYSQL_USER, params.MYSQL_PWD)
                promoteService(params.IMAGE_NAMESPACE, params.TEST_PROJECT,env.MODULE_NAME, env.srcTag, env.destTag)
            }
        }
      stage('Test-Env smoke-test') {
            when {
              expression {
                  params.SELECT_DEPLOY_TO_PROD == false
              }
            }
            steps {
                script {
                    retry(5) {
                        serviceName = 'fuse-user-service:8080'
                        smokeTestOperation = 'cicd/users/profile/11111'
                        makeGetRequest("http://${serviceName}/${smokeTestOperation}")
                    }
                }
            }
        }
        stage('Wait for user to select module to push to production.') {
            when {
                expression {
                    params.SELECT_DEPLOY_TO_PROD == true
                }
            }
            steps {
                script {
                    try {
                        timeout (time:2, unit:'HOURS') {
                            env.userProdApproval = input(id: 'userInput', message: "Do you approve this build to promote to production?")
                            env.userProdApproval = 'Approved'
                        }
                    } catch (exception) {
                      env.userProdApproval='---'
                    }

                    println("User approval to production " + env.userProdApproval);
                }
            }
        }
        stage('Pushing to Prod') {
            environment {
                srcTag = 'latest'
                destTag = 'promoteProd'
            }
            when {
              expression {
                env.userProdApproval == 'Approved'
              }
            }
            steps {
                echo "Deploy ${MODULE_NAME} to ${PROD_PROJECT} "
                promoteServiceSetup(params.OPENSHIFT_HOST, params.OPENSHIFT_TOKEN, env.MODULE_NAME,params.IMAGE_REGISTRY, params.IMAGE_NAMESPACE, env.destTag, params.PROD_PROJECT, params.MYSQL_USER, params.MYSQL_PWD)
                promoteService(params.IMAGE_NAMESPACE, params.PROD_PROJECT, env.MODULE_NAME,  env.srcTag, env.destTag)
            }
        }
      stage('Prod-Env smoke-test') {
            when {
              expression {
                    env.userProdApproval == 'Approved'
              }
            }
            steps {
                script {
                    retry(5) {
                        serviceName = 'fuse-user-service:8080'
                        smokeTestOperation = 'cicd/users/profile/11111'
                        makeGetRequest("http://${serviceName}/${smokeTestOperation}")
                    }
                }
            }
        }
    }
}

def promoteServiceSetup(openShiftHost, openShiftToken, svcName, registry, imageNameSpace, tagName, projName, mysqlUser, mysqlPwd) {
    try {
        sh """
            oc delete dc ${svcName} -n ${projName} 2> /dev/null
        """
    } catch (Exception e) {
      echo "skip dc/svc/route cleanup related exception, the resource may not exist. " + e.getMessage();
    }
    try {
        sh """ 
            oc create dc ${svcName} --image=${registry}/${imageNameSpace}/${svcName}:${tagName} -n ${projName} 2> /dev/null 
            oc rollout pause dc ${svcName} -n ${projName}  2> /dev/null
            oc patch dc ${svcName} -p '{"spec": {"template": {"spec": {"containers": [{"name": "default-container","imagePullPolicy": "Always"}]}}}}' -n ${projName} 2> /dev/null
            oc set env dc ${svcName} MYSQL_SERVICE_NAME=mysql -n ${projName} 2> /dev/null
            oc set env dc ${svcName} MYSQL_SERVICE_USERNAME=${mysqlUser} -n ${projName} 2> /dev/null
            oc set env dc ${svcName} MYSQL_SERVICE_PASSWORD=${mysqlPwd} -n ${projName} 2> /dev/null
            oc set env dc ${svcName} JAVA_APP_DIR=/deployments -n ${projName} 2> /dev/null
            oc rollout resume dc ${svcName} -n ${projName}  2> /dev/null
            oc expose dc ${svcName} --type=ClusterIP  --port=8080 --protocol=TCP --target-port=8080 -n ${projName}  2> /dev/null
            oc expose svc ${svcName} --name=${svcName} -n ${projName}  2> /dev/null
        """
    } catch (Exception e) {
      echo "skip dc/svc/route creation related exception, the resource may already exist. " + e.getMessage();
    }
}
def promoteService (imageNamespace, projName, svcName, sourceTag, destinationTag) {
    script {
         openshift.withCluster() {
             openshift.withProject( imageNamespace ) {
                 echo "tagging the build for ${projName} ${sourceTag} to ${destinationTag} in ${imageNamespace} "
                 openshift.tag("${svcName}:${sourceTag}", "${svcName}:${destinationTag}")
             }
         }
         echo "deploying the ${svcName} to ${projName} "
         openshift.withCluster() {
             openshift.withProject( projName) {
                def dply = openshift.selector("dc", svcName)
                echo "waiting for ... "+ dply.rollout().status()
             }
         }
     }//script
}

def build(folderName) {
    sh """

    cd ${folderName}

    mvn package -Dmaven.test.skip=true
    """

}
def deploy(folderName, projName, openShiftHost, openShiftToken, mysqlUser, mysqlPwd) {
    sh """
    cd ${folderName}

    oc project ${projName}

    mvn fabric8:deploy -Dmaven.test.skip=true -Dmysql-service-username=${mysqlUser} -Dmysql-service-password=${mysqlPwd}
    """
}

def makeGetRequest(url) {
    sh"""set -e +x
                          curl -k -f -w "SmokeTest: %{http_code}\n" -o /dev/null -s ${url}
    """

}
